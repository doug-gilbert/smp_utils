.TH SMP_WRITE_GPIO "8" "August 2006" "smp_utils-0.91" SMP_UTILS
.SH NAME
smp_write_gpio \- invoke WRITE GPIO REGISTER SMP function
.SH SYNOPSIS
.B smp_write_gpio
[\fI--count=<n>\fR] [\fI--data=<h>,<h>...\fR] [\fI--help\fR] [\fI--hex\fR]
[\fI--index=<n>\fR] [\fI--interface=<params>\fR] [\fI--raw\fR]
[\fI--sa=<sas_addr>\fR] [\fI--type=<n>\fR] [\fI--verbose\fR] [\fI--version\fR]
\fI<smp_device>[,<n>]\fR
.SH DESCRIPTION
.\" Add any additional description here
.PP
Sends a SAS Management Protocol (SMP) WRITE GPIO REGISTER request function
to a SMP target. The SMP target is identified by the <smp_device>
and the <sas_addr>. Depending on the interface, the <sas_addr>
may be deduced from the <smp_device>. With one interface there is
one <smp_device> per machine so the '<smp_device>,<n>' syntax is
needed to differentiate between HBAs if there are multiple present.
.PP
This function is defined in SFF-8485 ( see www.sffcommittee.com )
together with its corresponding READ GPIO REGISTER SMP function.
The other SMP functions are defined in SAS documents at www.t10.org .
SFF-8485 defines a curious device called a "virtual SMP port"
that lives in a host bus adapter (HBA) and allows SMP to manipulate
the sideband signals in wide internal cables. To stop other initiators
in a multi-initiator domain from accessing those sideband signals,
the virtual SMP (target) port is not indicated in a DISCOVER response.
.TP
--count=<n> | -c <n>
where <n> is the register count. This is the number of (4 byte)
registers to send. The default value is 1.
.TP
--data=<h>,<h>... | -d <h>,<h>...
this option supplies a comma separated list of hexadecimal
bytes (0 to ff inclusive) that will be used as write data
in the WRITE GPIO REGISTER request. The number of bytes supplied
should be four times '--count=<n>'. The first 4 bytes will become
the first register written. 
.TP
--data=- | -d -
reads string of hexadecomal bytes from stdin. Spaces, tabs and line
feeds additionally are permitted as separators.
.TP
--help | -h
output the usage message then exit.
.TP
--hex | -H
output the response in hexadecimal.
.TP
--index=<n> | -i <n>
where <n> is the register index. This value is origin zero and its
default value is 0. The request will send 'count' registers
starting from 'index' of the given 'type'.
.TP
--interface=<params> | -I <params>
interface specific parameters. In this case "interface" refers to the
path through the operating system to the SMP initiator. See the smp_utils
man page for more information.
.TP
--raw | -r
send the response to stdout in binary. All error messages are sent to stderr.
.TP
--sa=<sas_addr> | -s <sas_addr>
specifies the SAS address of the SMP target device. Typically this is an
expander. This option may not be needed if the <smp_device> has the target's
SAS address within it. The <sas_addr> is in decimal but most SAS addresses
are shown in hexadecimal. To give a number in hexadecimal either prefix
it with '0x' or put a trailing 'h' on it.
.TP
--type=<n> | -t <n>
where <n> is the register type. The default value is 0 (GPIO_CFG).
The request will send 'count' registers starting from 'index' of the
given 'type'.
.TP
--verbose | -v
increase the verbosity of the output. Can be used multiple times
.TP
--version | -V
print the version string and then exit.
.SH AUTHORS
Written by Douglas Gilbert.
.SH "REPORTING BUGS"
Report bugs to <dgilbert at interlog dot com>.
.SH COPYRIGHT
Copyright \(co 2006 Douglas Gilbert
.br
This software is distributed under a FreeBSD license. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.B smp_utils, smp_read_gpio(smp_utils)
